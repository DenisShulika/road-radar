package com.denisshulika.road_radar.pagesimport android.icu.text.SimpleDateFormatimport android.widget.Toastimport androidx.activity.compose.BackHandlerimport androidx.compose.animation.core.animateDpAsStateimport androidx.compose.animation.core.animateFloatAsStateimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.gestures.detectHorizontalDragGesturesimport androidx.compose.foundation.isSystemInDarkThemeimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.navigationBarsPaddingimport androidx.compose.foundation.layout.offsetimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.statusBarsPaddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material.icons.filled.Menuimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.CenterAlignedTopAppBarimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.ElevatedCardimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TopAppBarDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.derivedStateOfimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.drawBehindimport androidx.compose.ui.draw.scaleimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.Paintimport androidx.compose.ui.graphics.drawscope.drawIntoCanvasimport androidx.compose.ui.graphics.toArgbimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.input.pointer.pointerInputimport androidx.compose.ui.platform.LocalConfigurationimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.platform.LocalDensityimport androidx.compose.ui.res.vectorResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.IntOffsetimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport com.denisshulika.road_radar.AuthStateimport com.denisshulika.road_radar.AuthViewModelimport com.denisshulika.road_radar.IncidentManagerimport com.denisshulika.road_radar.LoadingDocumentsStateimport com.denisshulika.road_radar.Rimport com.denisshulika.road_radar.Routesimport com.denisshulika.road_radar.SettingsViewModelimport com.denisshulika.road_radar.local.UserLocalStorageimport com.denisshulika.road_radar.model.CustomDrawerStateimport com.denisshulika.road_radar.model.IncidentInfoimport com.denisshulika.road_radar.model.NavigationItemimport com.denisshulika.road_radar.model.ThemeStateimport com.denisshulika.road_radar.model.isOpenedimport com.denisshulika.road_radar.model.oppositeimport com.denisshulika.road_radar.ui.components.CustomDrawerimport com.denisshulika.road_radar.util.coloredShadowimport com.google.accompanist.systemuicontroller.rememberSystemUiControllerimport java.util.Localeimport kotlin.math.roundToInt@OptIn(ExperimentalMaterial3Api::class)@Composablefun IncidentsPage(    modifier: Modifier = Modifier,    navController: NavController,    authViewModel: AuthViewModel,    settingsViewModel: SettingsViewModel,    incidentManager: IncidentManager) {    val context = LocalContext.current    val configuration = LocalConfiguration.current    val destiny = LocalDensity.current.density    val authState = authViewModel.authState.observeAsState()    LaunchedEffect(authState.value) {        authViewModel.checkAuthStatus()        when (authState.value) {            is AuthState.Unauthenticated ->                navController.navigate(Routes.LOGIN)            else ->                Unit        }    }    val localization = settingsViewModel.localization.observeAsState().value!!    val theme = settingsViewModel.themeColors.observeAsState().value!!    val dateFormat = SimpleDateFormat(        "EEEE, dd MMMM".trimIndent(),        Locale(localization["date_format_language"]!!, localization["date_format_country"]!!)    )    val timeFormat = SimpleDateFormat(        "'at' HH:mm:ss".trimIndent(),        Locale(localization["date_format_language"]!!, localization["date_format_country"]!!)    )    val loadingState by incidentManager.loadingDocumentsState.observeAsState()    val incidents = incidentManager.documentsList.observeAsState(emptyList())    var incidentLoadingTrigger by remember { mutableStateOf(false) }    val userLocalStorage = UserLocalStorage(context)    LaunchedEffect(incidentLoadingTrigger) {        incidentManager.setLoadingDocumentsState(LoadingDocumentsState.Loading)        val region = userLocalStorage.getUserRegion().toString()        incidentManager.setUserRegion(region)        if(incidents.value.isNotEmpty()) {            val latestDoc1 = incidents.value.first()            val oldestDoc1 = incidents.value.last()            val latestDoc2 = incidentManager.getLatestIncident(region, localization)            val oldestDoc2 = incidentManager.getOldestIncident(region, localization)            val needToUpdate = latestDoc1.id != latestDoc2!!.id || oldestDoc1.id != oldestDoc2!!.id || oldestDoc2.getTimestamp("creationDate")!!.toDate().time > 3 * 60 * 60 * 1000            if (needToUpdate) {                incidentManager.loadIncidentsByRegion(region, localization)            } else {                incidentManager.setLoadingDocumentsState(LoadingDocumentsState.Success)            }        } else {            incidentManager.loadIncidentsByRegion(region, localization)        }    }    var drawerState by remember { mutableStateOf(CustomDrawerState.Closed) }    var selectedNavigationItem by remember { mutableStateOf(NavigationItem.Incidents) }    val screenWidth = remember {        derivedStateOf { (configuration.screenWidthDp * destiny).roundToInt() }    }    val offsetValue by remember { derivedStateOf { (screenWidth.value / 4.5).dp } }    val animatedOffset by animateDpAsState(        targetValue = if (drawerState.isOpened()) offsetValue else 0.dp,        label = "Animated Offset"    )    val animatedScale by animateFloatAsState(        targetValue = if (drawerState.isOpened()) 0.9f else 1f,        label = "Animated Scale"    )    BackHandler(enabled = drawerState.isOpened()) {        drawerState = CustomDrawerState.Closed    }    val systemUiController = rememberSystemUiController()    systemUiController.setStatusBarColor(        color = if (drawerState == CustomDrawerState.Closed) theme["top_bar_background"]!! else theme["drawer_background"]!!,        darkIcons = settingsViewModel.getTheme() != ThemeState.DARK || !isSystemInDarkTheme()    )    systemUiController.setNavigationBarColor(        color = if (drawerState == CustomDrawerState.Closed) theme["background"]!! else theme["drawer_background"]!!,        darkIcons = settingsViewModel.getTheme() != ThemeState.DARK || !isSystemInDarkTheme()    )    Box(        modifier = Modifier            .statusBarsPadding()            .navigationBarsPadding()            .background(theme["drawer_background"]!!)            .fillMaxSize()            .pointerInput(Unit) {                detectHorizontalDragGestures { _, dragAmount ->                    drawerState =                        if (dragAmount > 0) CustomDrawerState.Opened else CustomDrawerState.Closed                }            }    ) {        CustomDrawer(            selectedNavigationItem = selectedNavigationItem,            onNavigationItemClick = {                selectedNavigationItem = it            },            onCloseClick = { drawerState = CustomDrawerState.Closed },            authViewModel = authViewModel,            settingsViewModel = settingsViewModel,            navController = navController,            incidentManager = incidentManager        )        Scaffold(            modifier = Modifier                .offset { IntOffset(animatedOffset.roundToPx(), 0) }                .scale(scale = animatedScale)                .coloredShadow(                    color = theme["shadow"]!!,                    alpha = 0.1f,                    shadowRadius = 30.dp                )                .clickable(enabled = drawerState == CustomDrawerState.Opened) {                    drawerState = CustomDrawerState.Closed                },            topBar = {                CenterAlignedTopAppBar(                    colors = TopAppBarDefaults.centerAlignedTopAppBarColors(                        containerColor = theme["top_bar_background"]!!,                        titleContentColor = theme["text"]!!,                        navigationIconContentColor = theme["icon"]!!,                        actionIconContentColor = theme["icon"]!!                    ),                    title = {                        Text(                            text = selectedNavigationItem.getTitle(localization),                            textAlign = TextAlign.Center,                            fontFamily = RubikFont,                            fontWeight = FontWeight.Bold                        )                    },                    navigationIcon = {                        IconButton(                            onClick = {                                drawerState = drawerState.opposite()                            }                        ) {                            Icon(                                imageVector = Icons.Default.Menu,                                contentDescription = ""                            )                        }                    },                    actions = {                        IconButton(                            onClick = {                                incidentLoadingTrigger = !incidentLoadingTrigger                            }                        ) {                            Icon(                                imageVector = ImageVector.vectorResource(R.drawable.refresh),                                contentDescription = ""                            )                        }                    }                )            }        ) { innerPadding ->            Box(                modifier = Modifier                    .fillMaxSize()                    .background(theme["background"]!!)                    .padding(innerPadding)            ) {                Column(                    modifier = Modifier                        .fillMaxSize()                        .padding(start = 20.dp, end = 20.dp)                ) {                    when (loadingState) {                        LoadingDocumentsState.Loading -> {                            Row(                                modifier = Modifier                                    .fillMaxSize(),                                verticalAlignment = Alignment.CenterVertically,                                horizontalArrangement = Arrangement.Center                            ) {                                Text(                                    text = localization["loading_incidents"]!!,                                    fontSize = 20.sp,                                    fontFamily = RubikFont,                                    color = theme["text"]!!                                )                                Spacer(modifier = Modifier.width(12.dp))                                CircularProgressIndicator(                                    color = theme["primary"]!!                                )                            }                        }                        is LoadingDocumentsState.Error -> {                            Box(                                modifier = Modifier.fillMaxSize(),                                contentAlignment = Alignment.Center                            ) {                                Text(                                    text = (loadingState as LoadingDocumentsState.Error).message,                                    fontSize = 16.sp,                                    fontFamily = RubikFont,                                    color = theme["error"]!!                                )                            }                        }                        LoadingDocumentsState.Success -> {                            if (incidents.value.isEmpty()) {                                Column(                                    modifier = Modifier.fillMaxSize(),                                    verticalArrangement = Arrangement.SpaceBetween,                                    horizontalAlignment = Alignment.CenterHorizontally                                ) {                                    Box(                                        contentAlignment = Alignment.Center,                                        modifier = Modifier.weight(1f)                                    ) {                                        Column(                                            verticalArrangement = Arrangement.Center,                                            horizontalAlignment = Alignment.CenterHorizontally                                        ) {                                            Text(                                                text = localization["no_incidents_in_region"]!!,                                                fontSize = 20.sp,                                                fontFamily = RubikFont,                                                textAlign = TextAlign.Center,                                                color = theme["text"]!!                                            )                                            Spacer(modifier = Modifier.height(16.dp))                                            Text(                                                text = localization["smile"]!!,                                                fontSize = 24.sp,                                                fontFamily = RubikFont,                                                color = theme["primary"]!!                                            )                                        }                                    }                                }                            } else {                                LazyColumn(                                    verticalArrangement = Arrangement.spacedBy(20.dp)                                ) {                                    item { Spacer(modifier = modifier) }                                    items(incidents.value) { incident ->                                        val type = when (incident.getString("type")) {                                            "CAR_ACCIDENT" -> localization["incident_type_car_accident"]!!                                            "ROADBLOCK" -> localization["incident_type_roadblock"]!!                                            "WEATHER_CONDITIONS" -> localization["incident_type_weather_conditions"]!!                                            "TRAFFIC_JAM" -> localization["incident_type_traffic_jam"]!!                                            "OTHER" -> localization["incident_type_other"]!!                                            else -> localization["incident_type_other"]!!                                        }                                        val description = incident.getString("description")!!                                        val address = incident.getString("address")!!                                        val creationDate = incident.getTimestamp("creationDate")!!.toDate()                                        val formatedDate = dateFormat.format(creationDate)                                        val formatedTime = timeFormat.format(creationDate)                                        Card (                                            modifier = Modifier                                                .fillMaxWidth()                                                .padding(vertical = 8.dp),                                            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),                                            colors = CardDefaults.cardColors(containerColor = theme["drawer_background"]!!)                                        ) {                                            Box(                                                modifier = Modifier                                                    .clickable {                                                        val currentTime = System.currentTimeMillis()                                                        val creationTime = creationDate.time                                                        val timeDifference = currentTime - creationTime                                                        if (timeDifference > 3 * 60 * 60 * 1000) {                                                            Toast.makeText(context, localization["incident_has_been_ended"]!!, Toast.LENGTH_LONG).show()                                                            incidentLoadingTrigger = !incidentLoadingTrigger                                                            return@clickable                                                        }                                                        val createdBy = incident.getString("createdBy")!!                                                        val photosRaw = incident.get("photos") as? List<*>                                                        val photos = photosRaw?.mapNotNull { it as? String } ?: emptyList()                                                        val incidentInfo = IncidentInfo(                                                            type = type,                                                            date = "$formatedDate $formatedTime",                                                            address = address,                                                            description = description,                                                            createdBy = createdBy,                                                            photos = photos                                                        )                                                        incidentManager.setSelectedDocumentInfo(incidentInfo)                                                        navController.navigate(Routes.INCIDENT)                                                    }                                            ) {                                                Column(                                                    modifier = Modifier                                                        .fillMaxWidth()                                                        .padding(16.dp),                                                    verticalArrangement = Arrangement.spacedBy(20.dp)                                                ) {                                                    Row(                                                        modifier = Modifier                                                            .fillMaxWidth(),                                                        verticalAlignment = Alignment.Top                                                    ) {                                                        Icon(                                                            imageVector = ImageVector.vectorResource(R.drawable.car),                                                            contentDescription = "",                                                            tint = theme["icon"]!!                                                        )                                                        Spacer(modifier = Modifier.size(24.dp))                                                        Text(                                                            text = type,                                                            fontSize = 20.sp,                                                            fontFamily = RubikFont,                                                            color = theme["text"]!!                                                        )                                                    }                                                    Row(                                                        modifier = Modifier                                                            .fillMaxWidth(),                                                        verticalAlignment = Alignment.Top                                                    ) {                                                        Icon(                                                            imageVector = ImageVector.vectorResource(R.drawable.time),                                                            contentDescription = "",                                                            tint = theme["icon"]!!                                                        )                                                        Spacer(modifier = Modifier.size(24.dp))                                                        Text(                                                            text = "$formatedDate\n$formatedTime",                                                            fontSize = 20.sp,                                                            fontFamily = RubikFont,                                                            color = theme["text"]!!                                                        )                                                    }                                                    Row(                                                        modifier = Modifier                                                            .fillMaxWidth(),                                                        verticalAlignment = Alignment.Top                                                    ) {                                                        Icon(                                                            imageVector = ImageVector.vectorResource(R.drawable.location),                                                            contentDescription = "",                                                            tint = theme["icon"]!!                                                        )                                                        Spacer(modifier = Modifier.size(24.dp))                                                        Text(                                                            text = address,                                                            fontSize = 20.sp,                                                            fontFamily = RubikFont,                                                            color = theme["text"]!!                                                        )                                                    }                                                    if(description.isNotEmpty()){                                                        Row(                                                            modifier = Modifier                                                                .fillMaxWidth(),                                                            verticalAlignment = Alignment.Top                                                        ) {                                                            Icon(                                                                imageVector = ImageVector.vectorResource(                                                                    R.drawable.message                                                                ),                                                                contentDescription = "",                                                                tint = theme["icon"]!!                                                            )                                                            Spacer(modifier = Modifier.size(24.dp))                                                            Text(                                                                text = if (description.length > 100) description.take(                                                                    100                                                                ) + "..." else description,                                                                fontSize = 20.sp,                                                                fontFamily = RubikFont,                                                                color = theme["text"]!!                                                            )                                                        }                                                    }                                                }                                            }                                        }                                    }                                    item { Spacer(modifier = modifier) }                                }                            }                        }                        LoadingDocumentsState.Null -> Unit                        null -> Unit                    }                }                FloatingActionButton(                    onClick = {                        navController.navigate(Routes.ADD_NEW_INCIDENT)                    },                    modifier = Modifier                        .align(Alignment.BottomEnd)                        .padding(16.dp),                    containerColor = theme["primary"]!!,                    shape = RoundedCornerShape(50)                ) {                    Icon(                        modifier = Modifier.size(32.dp),                        imageVector = Icons.Filled.Add,                        contentDescription = "",                        tint = theme["icon"]!!                    )                }            }        }    }}