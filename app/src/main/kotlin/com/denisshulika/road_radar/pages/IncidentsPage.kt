package com.denisshulika.road_radar.pagesimport android.Manifestimport android.icu.text.SimpleDateFormatimport android.widget.Toastimport androidx.activity.compose.BackHandlerimport androidx.activity.compose.rememberLauncherForActivityResultimport androidx.activity.result.contract.ActivityResultContractsimport androidx.compose.animation.core.animateDpAsStateimport androidx.compose.animation.core.animateFloatAsStateimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.gestures.detectHorizontalDragGesturesimport androidx.compose.foundation.isSystemInDarkThemeimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.ExperimentalLayoutApiimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.navigationBarsPaddingimport androidx.compose.foundation.layout.offsetimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.statusBarsPaddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material.icons.filled.Menuimport androidx.compose.material3.Cardimport androidx.compose.material3.CardDefaultsimport androidx.compose.material3.CenterAlignedTopAppBarimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.HorizontalDividerimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TextButtonimport androidx.compose.material3.TopAppBarDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.derivedStateOfimport androidx.compose.runtime.getValueimport androidx.compose.runtime.livedata.observeAsStateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.scaleimport androidx.compose.ui.graphics.vector.ImageVectorimport androidx.compose.ui.input.pointer.pointerInputimport androidx.compose.ui.platform.LocalConfigurationimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.platform.LocalDensityimport androidx.compose.ui.res.vectorResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.IntOffsetimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavControllerimport com.denisshulika.road_radar.AuthStateimport com.denisshulika.road_radar.AuthViewModelimport com.denisshulika.road_radar.Incidentimport com.denisshulika.road_radar.IncidentsManagerimport com.denisshulika.road_radar.LoadingDocumentsStateimport com.denisshulika.road_radar.LocationHandlerimport com.denisshulika.road_radar.LocationRequestStateimport com.denisshulika.road_radar.Rimport com.denisshulika.road_radar.Routesimport com.denisshulika.road_radar.SettingsViewModelimport com.denisshulika.road_radar.model.CustomDrawerStateimport com.denisshulika.road_radar.model.NavigationItemimport com.denisshulika.road_radar.model.ThemeStateimport com.denisshulika.road_radar.model.isOpenedimport com.denisshulika.road_radar.model.oppositeimport com.denisshulika.road_radar.ui.components.CustomDrawerimport com.denisshulika.road_radar.util.coloredShadowimport com.google.accompanist.systemuicontroller.rememberSystemUiControllerimport com.google.firebase.Timestampimport java.util.Localeimport kotlin.math.roundToInt@OptIn(ExperimentalMaterial3Api::class)@Composablefun IncidentsPage(    navController: NavController,    authViewModel: AuthViewModel,    settingsViewModel: SettingsViewModel,    incidentsManager: IncidentsManager,    locationHandler: LocationHandler) {    val localization = settingsViewModel.localization.observeAsState().value!!    val theme = settingsViewModel.themeColors.observeAsState().value!!    val context = LocalContext.current    val configuration = LocalConfiguration.current    val destiny = LocalDensity.current.density    val authState = authViewModel.authState.observeAsState()    LaunchedEffect(authState.value) {        authViewModel.checkAuthStatus()        when (authState.value) {            is AuthState.Unauthenticated -> {                incidentsManager.stopListeningIncidents()                navController.navigate(Routes.LOGIN)            }            else -> Unit        }    }    var latitude by remember { mutableStateOf<Double?>(null) }    var longitude by remember { mutableStateOf<Double?>(null) }    val dateFormat = SimpleDateFormat(        "EEEE, dd MMMM".trimIndent(),        Locale(localization["date_format_language"]!!, localization["date_format_country"]!!)    )    val timeFormat = SimpleDateFormat(        "'at' HH:mm:ss".trimIndent(),        Locale(localization["date_format_language"]!!, localization["date_format_country"]!!)    )    val loadingDocumentsState by incidentsManager.loadingDocumentsState.observeAsState()    val incidents = incidentsManager.incidents.observeAsState(emptyList()).value    val locationRequestState by locationHandler.locationRequestState.observeAsState()    val radius = settingsViewModel.radius.observeAsState().value!!    val userLocation = locationHandler.userLocation.observeAsState().value    val lastUpdateTime = locationHandler.lastUpdateTime.observeAsState().value!!    var incidentLoadingTrigger by remember { mutableStateOf(false) }    val locationLauncher = rememberLauncherForActivityResult(        contract = ActivityResultContracts.RequestMultiplePermissions()    ) { permissions ->        locationHandler.handlePermissionResult(            permissions = permissions,            onSuccess = { location ->                latitude = location.latitude                longitude = location.longitude                incidentsManager.stopListeningIncidents()                incidentsManager.startListeningIncidents(                    location.latitude,                    location.longitude,                    radius.toDouble(),                    localization                )            }        )    }    LaunchedEffect(incidentLoadingTrigger) {        val currTime = System.currentTimeMillis()        if (currTime - lastUpdateTime > 5 * 60 * 1000 || userLocation == null) {            locationLauncher.launch(                arrayOf(                    Manifest.permission.ACCESS_FINE_LOCATION,                    Manifest.permission.ACCESS_COARSE_LOCATION                )            )        } else {            latitude = userLocation.latitude            longitude = userLocation.longitude            incidentsManager.stopListeningIncidents()            incidentsManager.startListeningIncidents(                latitude!!,                longitude!!,                radius.toDouble(),                localization            )        }    }    var drawerState by remember { mutableStateOf(CustomDrawerState.Closed) }    var selectedNavigationItem by remember { mutableStateOf(NavigationItem.Incidents) }    val screenWidth = remember {        derivedStateOf { (configuration.screenWidthDp * destiny).roundToInt() }    }    val offsetValue by remember { derivedStateOf { (screenWidth.value / 4.5).dp } }    val animatedOffset by animateDpAsState(        targetValue = if (drawerState.isOpened()) offsetValue else 0.dp,        label = "Animated Offset"    )    val animatedScale by animateFloatAsState(        targetValue = if (drawerState.isOpened()) 0.9f else 1f,        label = "Animated Scale"    )    BackHandler(enabled = drawerState.isOpened()) {        drawerState = CustomDrawerState.Closed    }    val systemUiController = rememberSystemUiController()    systemUiController.setStatusBarColor(        color = if (drawerState == CustomDrawerState.Closed) theme["top_bar_background"]!! else theme["drawer_background"]!!,        darkIcons = settingsViewModel.getTheme() != ThemeState.DARK || !isSystemInDarkTheme()    )    systemUiController.setNavigationBarColor(        color = if (drawerState == CustomDrawerState.Closed) theme["background"]!! else theme["drawer_background"]!!,        darkIcons = settingsViewModel.getTheme() != ThemeState.DARK || !isSystemInDarkTheme()    )    Box(        modifier = Modifier            .statusBarsPadding()            .navigationBarsPadding()            .background(theme["drawer_background"]!!)            .fillMaxSize()            .pointerInput(Unit) {                detectHorizontalDragGestures { _, dragAmount ->                    drawerState =                        if (dragAmount > 0) CustomDrawerState.Opened else CustomDrawerState.Closed                }            }    ) {        CustomDrawer(            selectedNavigationItem = selectedNavigationItem,            onNavigationItemClick = {                if (it != NavigationItem.MapRadar) {                    incidentsManager.stopListeningIncidents()                }                selectedNavigationItem = it            },            onCloseClick = { drawerState = CustomDrawerState.Closed },            authViewModel = authViewModel,            settingsViewModel = settingsViewModel,            navController = navController,            incidentsManager = incidentsManager        )        Scaffold(            modifier = Modifier                .offset { IntOffset(animatedOffset.roundToPx(), 0) }                .scale(scale = animatedScale)                .coloredShadow(                    color = theme["shadow"]!!,                    alpha = 0.1f,                    shadowRadius = 30.dp                )                .clickable(enabled = drawerState == CustomDrawerState.Opened) {                    drawerState = CustomDrawerState.Closed                },            topBar = {                CenterAlignedTopAppBar(                    colors = TopAppBarDefaults.centerAlignedTopAppBarColors(                        containerColor = theme["top_bar_background"]!!,                        titleContentColor = theme["text"]!!,                        navigationIconContentColor = theme["icon"]!!,                        actionIconContentColor = theme["icon"]!!                    ),                    title = {                        Text(                            text = selectedNavigationItem.getTitle(localization),                            textAlign = TextAlign.Center,                            fontFamily = RubikFont,                            fontWeight = FontWeight.Bold                        )                    },                    navigationIcon = {                        IconButton(                            onClick = {                                drawerState = drawerState.opposite()                            }                        ) {                            Icon(                                imageVector = Icons.Default.Menu,                                contentDescription = ""                            )                        }                    },                    actions = {                        IconButton(                            onClick = {                                locationHandler.setLastUpdateTime(0L)                                incidentLoadingTrigger = !incidentLoadingTrigger                            },                            enabled = loadingDocumentsState != LoadingDocumentsState.Loading && locationRequestState != LocationRequestState.Loading                        ) {                            Icon(                                imageVector = ImageVector.vectorResource(R.drawable.refresh),                                contentDescription = ""                            )                        }                    }                )            }        ) { innerPadding ->            Box(                modifier = Modifier                    .fillMaxSize()                    .background(theme["background"]!!)                    .padding(innerPadding)            ) {                Column(                    modifier = Modifier                        .fillMaxSize()                        .padding(start = 20.dp, end = 20.dp)                ) {                    when (locationRequestState) {                        LocationRequestState.Success -> {                            when (loadingDocumentsState) {                                LoadingDocumentsState.Success -> {                                    if (incidents.isEmpty()) {                                        Column(                                            modifier = Modifier.fillMaxSize(),                                            verticalArrangement = Arrangement.SpaceBetween,                                            horizontalAlignment = Alignment.CenterHorizontally                                        ) {                                            Box(                                                contentAlignment = Alignment.Center,                                                modifier = Modifier.weight(1f)                                            ) {                                                Column(                                                    verticalArrangement = Arrangement.Center,                                                    horizontalAlignment = Alignment.CenterHorizontally                                                ) {                                                    Text(                                                        text = localization["no_incidents_in_radius"]!!,                                                        fontSize = 20.sp,                                                        fontFamily = RubikFont,                                                        textAlign = TextAlign.Center,                                                        color = theme["text"]!!                                                    )                                                    Spacer(modifier = Modifier.height(16.dp))                                                    Text(                                                        text = localization["smile"]!!,                                                        fontSize = 24.sp,                                                        fontFamily = RubikFont,                                                        color = theme["primary"]!!                                                    )                                                }                                            }                                        }                                    } else {                                        LazyColumn(                                            verticalArrangement = Arrangement.spacedBy(20.dp)                                        ) {                                            item { Spacer(modifier = Modifier) }                                            items(incidents) { incident ->                                                val type = when (incident.type) {                                                    "CAR_ACCIDENT" -> localization["incident_type_car_accident"]!!                                                    "ROADBLOCK" -> localization["incident_type_roadblock"]!!                                                    "WEATHER_CONDITIONS" -> localization["incident_type_weather_conditions"]!!                                                    "TRAFFIC_JAM" -> localization["incident_type_traffic_jam"]!!                                                    "OTHER" -> localization["incident_type_other"]!!                                                    else -> localization["incident_type_other"]!!                                                }                                                val description = incident.description                                                val address = incident.address                                                val creationDate = incident.creationDate.toDate()                                                val formatedDate = dateFormat.format(creationDate)                                                val formatedTime = timeFormat.format(creationDate)                                                val id = incident.id                                                Card(                                                    modifier = Modifier                                                        .fillMaxWidth()                                                        .padding(vertical = 8.dp),                                                    elevation = CardDefaults.cardElevation(                                                        defaultElevation = 4.dp                                                    ),                                                    colors = CardDefaults.cardColors(containerColor = theme["drawer_background"]!!)                                                ) {                                                    Column {                                                        Box(                                                            modifier = Modifier                                                                .clickable {                                                                    val currentTime = System.currentTimeMillis()                                                                    val creationTime = creationDate.time                                                                    val timeDifference = currentTime - creationTime                                                                    if (timeDifference > 3 * 60 * 60 * 1000) {                                                                        Toast.makeText(context, localization["incident_has_been_ended"]!!, Toast.LENGTH_LONG).show()                                                                        incidentLoadingTrigger = !incidentLoadingTrigger                                                                        return@clickable                                                                    }                                                                    val createdBy = incident.createdBy                                                                    val photos = incident.photos                                                                    val incidentInfo = Incident(                                                                        id = id,                                                                        type = type,                                                                        address = address,                                                                        description = description,                                                                        createdBy = createdBy,                                                                        photos = photos,                                                                        creationDate = Timestamp(creationDate)                                                                    )                                                                    incidentsManager.setSelectedDocumentInfo(                                                                        incidentInfo                                                                    )                                                                    incidentsManager.stopListeningIncidents()                                                                    navController.navigate(Routes.INCIDENT)                                                                }                                                                .fillMaxWidth()                                                        ) {                                                            Column(                                                                modifier = Modifier                                                                    .fillMaxWidth()                                                                    .padding(16.dp),                                                                verticalArrangement = Arrangement.spacedBy(20.dp)                                                            ) {                                                                Row(                                                                    modifier = Modifier                                                                        .fillMaxWidth(),                                                                    verticalAlignment = Alignment.Top                                                                ) {                                                                    Icon(                                                                        imageVector = ImageVector.vectorResource(R.drawable.car),                                                                        contentDescription = "",                                                                        tint = theme["icon"]!!                                                                    )                                                                    Spacer(modifier = Modifier.size(24.dp))                                                                    Text(                                                                        text = type,                                                                        fontSize = 20.sp,                                                                        fontFamily = RubikFont,                                                                        color = theme["text"]!!                                                                    )                                                                }                                                                Row(                                                                    modifier = Modifier                                                                        .fillMaxWidth(),                                                                    verticalAlignment = Alignment.Top                                                                ) {                                                                    Icon(                                                                        imageVector = ImageVector.vectorResource(                                                                            R.drawable.time                                                                        ),                                                                        contentDescription = "",                                                                        tint = theme["icon"]!!                                                                    )                                                                    Spacer(modifier = Modifier.size(24.dp))                                                                    Text(                                                                        text = "$formatedDate\n$formatedTime",                                                                        fontSize = 20.sp,                                                                        fontFamily = RubikFont,                                                                        color = theme["text"]!!                                                                    )                                                                }                                                                Row(                                                                    modifier = Modifier                                                                        .fillMaxWidth(),                                                                    verticalAlignment = Alignment.Top                                                                ) {                                                                    Icon(                                                                        imageVector = ImageVector.vectorResource(                                                                            R.drawable.location                                                                        ),                                                                        contentDescription = "",                                                                        tint = theme["icon"]!!                                                                    )                                                                    Spacer(modifier = Modifier.size(24.dp))                                                                    Text(                                                                        text = address,                                                                        fontSize = 20.sp,                                                                        fontFamily = RubikFont,                                                                        color = theme["text"]!!                                                                    )                                                                }                                                                if (description.isNotEmpty()) {                                                                    Row(                                                                        modifier = Modifier                                                                            .fillMaxWidth(),                                                                        verticalAlignment = Alignment.Top                                                                    ) {                                                                        Icon(                                                                            imageVector = ImageVector.vectorResource(                                                                                R.drawable.message                                                                            ),                                                                            contentDescription = "",                                                                            tint = theme["icon"]!!                                                                        )                                                                        Spacer(modifier = Modifier.size(24.dp))                                                                        Text(                                                                            text = if (description.length > 50) description.take(                                                                                50                                                                            ) + "..." else description,                                                                            fontSize = 20.sp,                                                                            fontFamily = RubikFont,                                                                            color = theme["text"]!!                                                                        )                                                                    }                                                                }                                                            }                                                        }                                                        HorizontalDivider(                                                            modifier = Modifier.padding(horizontal = 12.dp),                                                            thickness = 1.dp,                                                            color = theme["icon"]!!.copy(alpha = 0.2f)                                                        )                                                        Box(                                                            modifier = Modifier                                                                .clickable {                                                                    val currentTime = System.currentTimeMillis()                                                                    val creationTime = creationDate.time                                                                    val timeDifference = currentTime - creationTime                                                                    if (timeDifference > 3 * 60 * 60 * 1000) {                                                                        Toast.makeText(context, localization["incident_has_been_ended"]!!, Toast.LENGTH_LONG).show()                                                                        incidentLoadingTrigger =                                                                            !incidentLoadingTrigger                                                                        return@clickable                                                                    }                                                                    val createdBy = incident.createdBy                                                                    val photos = incident.photos                                                                    val incidentInfo = Incident(                                                                        id = id,                                                                        type = type,                                                                        address = address,                                                                        description = description,                                                                        createdBy = createdBy,                                                                        photos = photos,                                                                        creationDate = Timestamp(creationDate)                                                                    )                                                                    incidentsManager.setSelectedDocumentInfo(                                                                        incidentInfo                                                                    )                                                                    incidentsManager.stopListeningIncidents()                                                                    navController.navigate(Routes.COMMENTS)                                                                }                                                                .fillMaxWidth()                                                        ) {                                                            Column(                                                                modifier = Modifier                                                                    .fillMaxWidth()                                                                    .padding(16.dp)                                                            ) {                                                                Row(                                                                    modifier = Modifier                                                                        .fillMaxWidth(),                                                                    verticalAlignment = Alignment.CenterVertically,                                                                    horizontalArrangement = Arrangement.SpaceBetween                                                                ) {                                                                    Row {                                                                        Icon(                                                                            imageVector = ImageVector.vectorResource(                                                                                R.drawable.comments                                                                            ),                                                                            contentDescription = "",                                                                            tint = theme["icon"]!!                                                                        )                                                                        Spacer(modifier = Modifier.size(24.dp))                                                                        Text(                                                                            text = "${                                                                                incident.commentCount                                                                            } ${when {                                                                                incident.commentCount == 0 -> localization["comments_zero"]!!                                                                                incident.commentCount % 100 in 11..14 -> localization["comments_many"]!!                                                                                incident.commentCount % 10 == 1 -> localization["comments_one"]!!                                                                                incident.commentCount % 10 in 2..4 -> localization["comments_few"]!!                                                                                else -> localization["comments_many"]!!                                                                            }}",                                                                            fontSize = 18.sp,                                                                            fontFamily = RubikFont,                                                                            color = theme["text"]!!                                                                        )                                                                    }                                                                    Icon(                                                                        imageVector = ImageVector.vectorResource(                                                                            R.drawable.arrow_right                                                                        ),                                                                        contentDescription = "",                                                                        tint = theme["icon"]!!                                                                    )                                                                }                                                            }                                                        }                                                    }                                                }                                            }                                            item { Spacer(modifier = Modifier) }                                        }                                    }                                }                                LoadingDocumentsState.Loading -> {                                    Column(                                        modifier = Modifier.fillMaxSize(),                                        verticalArrangement = Arrangement.Center,                                        horizontalAlignment = Alignment.CenterHorizontally                                    ){                                        Text(                                            text = localization["loading_incidents"]!!,                                            fontSize = 20.sp,                                            fontFamily = RubikFont,                                            color = theme["text"]!!,                                            textAlign = TextAlign.Center                                        )                                        Spacer(modifier = Modifier.size(12.dp))                                        CircularProgressIndicator(                                            color = theme["primary"]!!                                        )                                    }                                }                                is LoadingDocumentsState.Error -> {                                    Column(                                        modifier = Modifier                                            .fillMaxSize()                                            .padding(24.dp)                                    ) {                                        Text(                                            text = localization["loading_documents_state_error"]!!,                                            fontSize = 20.sp,                                            fontFamily = RubikFont,                                            color = theme["error"]!!                                        )                                        Text(                                            text = (loadingDocumentsState as LoadingDocumentsState.Error).message,                                            fontSize = 20.sp,                                            fontFamily = RubikFont,                                            color = theme["error"]!!                                        )                                    }                                }                                LoadingDocumentsState.Idle -> Unit                                null -> Unit                            }                        }                        LocationRequestState.Loading -> {                            Column(                                modifier = Modifier.fillMaxSize(),                                verticalArrangement = Arrangement.Center,                                horizontalAlignment = Alignment.CenterHorizontally                            ) {                                Text(                                    text = localization["location_request_state_loading"]!!,                                    fontSize = 20.sp,                                    fontFamily = RubikFont,                                    color = theme["text"]!!,                                    textAlign = TextAlign.Center                                )                                Spacer(modifier = Modifier.size(12.dp))                                CircularProgressIndicator(                                    color = theme["primary"]!!                                )                            }                        }                        LocationRequestState.NoLocation -> {                            Box(                                modifier = Modifier                                    .fillMaxSize()                                    .padding(24.dp),                                contentAlignment = Alignment.Center                            ) {                                Text(                                    text = localization["location_request_state_no_location"]!!,                                    fontSize = 20.sp,                                    fontFamily = RubikFont,                                    color = theme["error"]!!,                                    textAlign = TextAlign.Center                                )                            }                        }                        LocationRequestState.NoPermission -> {                            Column(                                modifier = Modifier                                    .fillMaxSize()                                    .padding(24.dp),                                horizontalAlignment = Alignment.CenterHorizontally,                                verticalArrangement = Arrangement.Center                            ) {                                Text(                                    text = localization["location_permission_needed"]!!,                                    fontSize = 18.sp,                                    fontFamily = RubikFont,                                    color = theme["text"]!!                                )                                Spacer(modifier = Modifier.height(20.dp))                                TextButton(                                    onClick = {                                        locationHandler.showLocationPermissionDialog(                                            context,                                            localization                                        )                                    }                                ) {                                    Text(                                        text = localization["grant_permission"]!!,                                        fontSize = 20.sp,                                        color = theme["primary"]!!,                                        fontFamily = RubikFont                                    )                                }                            }                        }                        is LocationRequestState.Error -> {                            Column(                                modifier = Modifier                                    .fillMaxSize()                                    .padding(24.dp)                            ) {                                Text(                                    text = localization["location_request_state_error"]!!,                                    fontSize = 20.sp,                                    fontFamily = RubikFont,                                    color = theme["error"]!!                                )                                Text(                                    text = (locationRequestState as LocationRequestState.Error).message,                                    fontSize = 20.sp,                                    fontFamily = RubikFont,                                    color = theme["error"]!!                                )                            }                        }                        LocationRequestState.Idle -> Unit                        null -> Unit                    }                }                FloatingActionButton(                    onClick = {                        incidentsManager.stopListeningIncidents()                        navController.navigate(Routes.ADD_NEW_INCIDENT)                    },                    modifier = Modifier                        .align(Alignment.BottomEnd)                        .padding(16.dp),                    containerColor = theme["primary"]!!,                    shape = RoundedCornerShape(50)                ) {                    Icon(                        modifier = Modifier.size(32.dp),                        imageVector = Icons.Filled.Add,                        contentDescription = "",                        tint = theme["icon"]!!                    )                }            }        }    }}